plugins {
    id 'java'
    id 'maven-publish'
}

group = 'com.github.OSRSB'

repositories {
    mavenLocal()
    maven {
        url "https://repo.runelite.net"
    }
    maven {
        url "https://jitpack.io"
    }
    mavenCentral()
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
        }
    }
}

def runeLiteVersion = "1.9.15"

static def getRuneLiteVersion() {
    URL url = new URL("http://repo.runelite.net/net/runelite/client/")
    URLConnection urlConnection = url.openConnection()
    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(
            urlConnection.getInputStream()))
    String latestName = null
    String inputLine
    while ((inputLine = bufferedReader.readLine()) != null) {
        inputLine = inputLine.trim().replaceAll(" +", " ")
        if (inputLine.contains("/\">") && inputLine.contains("</a>")) {
            String name = inputLine.substring(inputLine.indexOf("/\">") + 3, inputLine.indexOf("</a>") - 1)
            String removeName = inputLine.substring(inputLine.indexOf("</a>") + 4)
            if (!name.contains("SNAPSHOT") && removeName != "") {
                if (compareSemanticVersion(latestName, name)) {
                    latestName = name;
                }
            }
        }
    }
    bufferedReader.close()
    return latestName
}

static def compareSemanticVersion(String s1, String s2) {
    if (s1 != null && s2 != null) {
        while (true) {
            if (s1.indexOf('.') != -1 && s2.indexOf('.') != -1) {
                if (s1.substring(0, s1.indexOf('.')) == s2.substring(0, s2.indexOf('.'))) {
                    s1 = s1.substring(s1.indexOf('.') + 1)
                    s2 = s2.substring(s2.indexOf('.') + 1)
                }
                else {
                    if (s1.indexOf('.') != -1) {
                        s1 = s1.substring(0, s1.indexOf('.'))
                    }
                    if (s2.indexOf('.') != -1) {
                        s2 = s2.substring(0, s2.indexOf('.'))
                    }
                    return Integer.parseInt(s1).intValue() < Integer.parseInt(s2).intValue()
                }
            }
            else {
                if (s1.indexOf('.') != -1) {
                    s1 = s1.substring(0, s1.indexOf('.'))
                }
                if (s2.indexOf('.') != -1) {
                    s2 = s2.substring(0, s2.indexOf('.'))
                }
                return Integer.parseInt(s1).intValue() < Integer.parseInt(s2).intValue()
            }
        }
    }
    return s1 == null && s2 != null
}

sourceSets {
    main {
        java {
            srcDirs= ["src/main/java"]
        }
        resources {
            srcDirs= ["src/main/resources"]
        }
    }
}

dependencies {
    compileOnly group: 'net.runelite', name: 'client', version: runeLiteVersion
    compileOnly group: 'net.runelite', name: 'cache', version: runeLiteVersion
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    compileClasspath 'com.github.OSRSB:OSRSBot:master-SNAPSHOT'
}

jar {
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

enum OperatingSystem {
    MAC, WINDOWS, LINUX, UNKNOWN

    static def getOperatingSystem() {
        final String os = System.getProperty("os.name")
        if (os.contains("Mac")) {
            return MAC
        } else if (os.contains("Windows")) {
            return WINDOWS
        } else if (os.contains("Linux")) {
            return LINUX
        } else {
            return UNKNOWN
        }
    }
}

task launchClientWithScript(type: JavaExec) {
    group = "Execution"
    description = "Runs the main method within RSB"
    classpath = sourceSets.main.compileClasspath + sourceSets.main.runtimeClasspath
    getMainClass() set "net.runelite.rsb.botLauncher.Application"
    String jvmArgString = (OperatingSystem.MAC == OperatingSystem.getOperatingSystem()) ?
            "-debug --add-opens=java.desktop/com.apple.eawt=ALL-UNNAMED --add-opens=java.desktop/sun.awt=ALL-UNNAMED" :
            "-debug"
    jvmArgs jvmArgString.split(" ")
    args "--bot-runelite --developer-mode".split(" ")
}
